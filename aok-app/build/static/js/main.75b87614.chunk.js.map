{"version":3,"sources":["components/Input.tsx","components/SubmitButton.tsx","components/Form.tsx","utils/downloadObjectAsJson.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Input","label","name","onChange","htmlFor","type","id","e","value","target","SubmitButton","onSubmit","onClick","Form","useState","firstName","lastName","birthDate","formData","setFormValue","event","exportObj","exportName","dataStr","encodeURIComponent","JSON","stringify","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","downloadObjectAsJson","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iTAsBeA,MAZf,YAAqD,IAArCC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,SAC3B,OACE,oCACE,2BAAOC,QAASF,GAAOD,GACvB,2BAAOI,KAAK,OAAOC,GAAIJ,EAAMA,KAAMA,EAAMC,SAAU,SAACI,GAAO,IACjDC,EAAUD,EAAEE,OAAZD,MACRL,EAASD,EAAMM,QCHRE,MANf,YAA6D,IAAtCF,EAAqC,EAArCA,MAAOG,EAA8B,EAA9BA,SAC5B,OACE,2BAAON,KAAK,SAASG,MAAOA,EAAOI,QAASD,KCqCjCE,MA1Bf,WAAiB,IAAD,EACkBC,mBAPW,CAC3CC,UAAW,GACXC,SAAU,GACVC,UAAW,KAGG,mBACTC,EADS,KACCC,EADD,KAKRhB,EAAW,SAACD,EAAcM,GAC9BW,EAAa,2BACRD,GADO,kBAEThB,EAAOM,MASZ,OACE,8BACE,kBAAC,EAAD,CAAOP,MAAM,cAAcC,KAAK,YAAYC,SAAUA,IACtD,kBAAC,EAAD,CAAOF,MAAM,aAAaC,KAAK,WAAWC,SAAUA,IACpD,kBAAC,EAAD,CAAcK,MAAM,WAAWG,SARlB,SAACS,ICjCL,SAA8BC,EAAmBC,GAC9D,IAAIC,EAAU,gCAAkCC,mBAAmBC,KAAKC,UAAUL,IAC9EM,EAAqBC,SAASC,cAAc,KAChDF,EAAmBG,aAAa,OAAQP,GACxCI,EAAmBG,aAAa,WAAYR,EAAa,SACzDM,SAASG,KAAKC,YAAYL,GAC1BA,EAAmBM,QACnBN,EAAmBO,SD2BjBC,CAAqBjB,EAAU,iBEpBpBkB,MATf,WACE,OACE,yBAAKC,UAAU,OACb,uCACA,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjB,SAASkB,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.75b87614.chunk.js","sourcesContent":["import React from 'react';\nimport './Input.css';\n\ninterface InputProps {\n  label: string,\n  name: string,\n  onChange: (name: string, value: string) => void,\n  // onChange: (e: React.ChangeEvent<HTMLInputElement>) => void,\n}\n\nfunction Input({label, name, onChange}: InputProps) {\n  return (\n    <>\n      <label htmlFor={name}>{label}</label>\n      <input type=\"text\" id={name} name={name} onChange={(e) => {\n        const { value } = e.target;\n        onChange(name, value);\n      }} />\n    </>\n  );\n}\n\nexport default Input;\n","import React from 'react';\n\ninterface SubmitButtonProps {\n  value: string,\n  onSubmit: (e: React.MouseEvent) => void,\n}\n\nfunction SubmitButton({value, onSubmit}: SubmitButtonProps) {\n  return (\n    <input type=\"button\" value={value} onClick={onSubmit} />\n  );\n}\n\nexport default SubmitButton;\n","import React, { useState } from 'react';\nimport './Form.css';\n\nimport Input from './Input';\nimport SubmitButton from './SubmitButton';\n\nimport downloadObjectAsJson from '../utils/downloadObjectAsJson';\n\ninterface FormData {\n  firstName: string,\n  lastName: string,\n  birthDate: string,\n}\n\nconst createEmptyFormData = (): FormData => ({\n  firstName: \"\",\n  lastName: \"\",\n  birthDate: \"\",\n});\n\nfunction Form() {\n  let [formData, setFormValue]  = useState<FormData>(\n    createEmptyFormData()\n  );\n\n  const onChange = (name: string, value: string) => {\n    setFormValue({\n      ...formData,\n      [name]: value,\n    });\n    // console.log('formData', formData);\n  }\n\n  const onSubmit = (event: any): any => {\n    downloadObjectAsJson(formData, 'formdata');\n  };\n\n  return (\n    <form>\n      <Input label=\"First name:\" name=\"firstName\" onChange={onChange} />\n      <Input label=\"Last name:\" name=\"lastName\" onChange={onChange} />\n      <SubmitButton value=\"Download\" onSubmit={onSubmit} />\n    </form>  \n  );\n}\n\nexport default Form;\n","export default function downloadObjectAsJson(exportObj: object, exportName: string) {\n  var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(exportObj));\n  var downloadAnchorNode = document.createElement('a');\n  downloadAnchorNode.setAttribute(\"href\", dataStr);\n  downloadAnchorNode.setAttribute(\"download\", exportName + \".json\");\n  document.body.appendChild(downloadAnchorNode);\n  downloadAnchorNode.click();\n  downloadAnchorNode.remove();\n}","import React from 'react';\nimport './App.css';\n\nimport Form from './components/Form';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Sign up</h1>\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}